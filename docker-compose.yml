version: '3.8'
networks:
  messaging_network:
    external: false
    name: backend
  backend:
    external: false
    name: backend
services:
  mongodb-movie:
    mem_limit: 1024m
    mem_reservation: 512M
    cpus: 2
    image: mongo:4.2
    container_name: "movie_db"
    hostname: mongodb-movie
    networks:
      - backend
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: movie
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
      - ./mongodb/scripts/:/docker-entrypoint-initdb.d/
    command: mongod
    healthcheck:
      test: "exit 0"
#  kafka-server:
#    image: michaeldqin/kafka
#    hostname: kafka-server
#    ports:
#      - "2181:2181"
#      - "9092:9092"
#    environment:
#      - KAFKA_ADVERTISED_HOST_NAME='kafka-server'
#      - ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092
#    volumes:
#      - ${PWD}/.:/opt/kafka_2.12-1.0.0/log
#    networks:
#      - messaging_network
#    logging:
#      driver: json-file

  movie-store:
    mem_limit: 256m
    mem_reservation: 128M
    cpus: 1
    build:
      context: ./movie-store/
      dockerfile: Dockerfile
    container_name: "movie_store"
    restart: always # This will be ignored if we deploy in docker swarm
    hostname: movie-store
    environment:
      - PROFILE=
      - MONGO_DB_HOSTNAME=mongodb-movie
      - MONGO_DB_USERNAME=intuit
      - MONGO_DB_PASSWORD=intuit123
      - MONGO_DB_NAME=movie
    ports:
      - 8083:8083
    working_dir: /opt/app
    links:
      - mongodb-movie
    depends_on:
      - mongodb-movie
    networks:
      - backend
      - messaging_network
    healthcheck:
      test: "exit 0"


volumes:
  mongodb_data_container: