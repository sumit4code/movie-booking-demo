version: '3.8'
networks:
  messaging_network:
    external: false
    name: backend
  backend:
    external: false
    name: backend
  redisnet:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16
services:
  redis-cluster:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis:6.0.13
    command: redis-cli -p 7001 --cluster create 10.0.0.11:7001 10.0.0.12:7002 10.0.0.13:7003 10.0.0.14:7004 10.0.0.15:7005 10.0.0.16:7006 --cluster-replicas 1 --cluster-yes
    depends_on:
      - redis-1
      - redis-2
      - redis-3
      - redis-4
      - redis-5
      - redis-6
    networks:
      redisnet:
        ipv4_address: 10.0.0.2
  redis-1:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    build: ./redis
    image: redis-cluster-node
    container_name: "rcd-1"
    environment:
      X_REDIS_PORT: 7001
    networks:
      redisnet:
        ipv4_address: 10.0.0.11
    ports:
      - 7001:6379
  redis-2:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis-cluster-node
    container_name: "rcd-2"
    environment:
      X_REDIS_PORT: 7002
    networks:
      redisnet:
        ipv4_address: 10.0.0.12
    ports:
      - 7002:6379
  redis-3:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis-cluster-node
    container_name: "rcd-3"
    environment:
      X_REDIS_PORT: 7003
    networks:
      redisnet:
        ipv4_address: 10.0.0.13
    ports:
      - 7003:6379
  redis-4:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis-cluster-node
    container_name: "rcd-4"
    environment:
      X_REDIS_PORT: 7004
    networks:
      redisnet:
        ipv4_address: 10.0.0.14
    ports:
      - 7004:6379
  redis-5:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis-cluster-node
    container_name: "rcd-5"
    environment:
      X_REDIS_PORT: 7005
    networks:
      redisnet:
        ipv4_address: 10.0.0.15
    ports:
      - 7005:6379
  redis-6:
    mem_limit: 100m
    mem_reservation: 60M
    cpus: 1
    image: redis-cluster-node
    container_name: "rcd-6"
    environment:
      X_REDIS_PORT: 7006
    networks:
      redisnet:
        ipv4_address: 10.0.0.16
    ports:
      - 7006:6379

  mongodb-movie:
    mem_limit: 512m
    mem_reservation: 256M
    cpus: 2
    image: mongo:4.2
    container_name: "movie_db"
    hostname: mongodb-movie
    networks:
      - backend
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: intuit
      MONGO_INITDB_ROOT_PASSWORD: intuit123
      MONGO_INITDB_DATABASE: movie
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
      - ./mongodb/scripts/:/docker-entrypoint-initdb.d/
    command: mongod
    healthcheck:
      test: "exit 0"
  kafka-server:
    mem_limit: 800m
    mem_reservation: 600M
    cpus: 2
    image: michaeldqin/kafka
    container_name: "kafka-server"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME='kafka-server'
      - ADVERTISED_LISTENERS=PLAINTEXT://kafka-server:9092
    volumes:
      - ${PWD}/.:/opt/kafka_2.12-1.0.0/log
    networks:
      - messaging_network
    logging:
      driver: json-file

  movie-store:
    mem_limit: 128m
    mem_reservation: 60M
    cpus: 1
    build:
      context: ./movie-store/
      dockerfile: Dockerfile
    container_name: "movie_store"
    restart: always # This will be ignored if we deploy in docker swarm
    hostname: movie-store
    environment:
      - PROFILE=seed
      - MONGO_DB_HOSTNAME=mongodb-movie
      - MONGO_DB_USERNAME=intuit
      - MONGO_DB_PASSWORD=intuit123
      - MONGO_DB_NAME=movie
      - REDIS_HOST=10.0.0.11:7001,10.0.0.12:7002,10.0.0.13:7003,10.0.0.14:7004,10.0.0.15:7005,10.0.0.16:7006
    ports:
      - 8083:8083
    working_dir: /opt/app
    links:
      - mongodb-movie
    depends_on:
      - mongodb-movie
      - redis-cluster
    networks:
      - backend
      - redisnet
      - messaging_network
    healthcheck:
      test: "exit 0"

  theater-manager:
    mem_limit: 256m
    mem_reservation: 60M
    cpus: 1
    build:
      context: ./theater-manager/
      dockerfile: Dockerfile
    container_name: "theater-manager"
    restart: always # This will be ignored if we deploy in docker swarm
    hostname: theater-manager
    environment:
      - PROFILE=seed
      - MONGO_DB_HOSTNAME=mongodb-movie
      - MONGO_DB_USERNAME=intuit
      - MONGO_DB_PASSWORD=intuit123
      - MONGO_DB_NAME=movie
      - REDIS_HOST=10.0.0.11:7001,10.0.0.12:7002,10.0.0.13:7003,10.0.0.14:7004,10.0.0.15:7005,10.0.0.16:7006
      - KAFKA_HOST=kafka-server:9092
    ports:
      - 8084:8084
    working_dir: /opt/app
    links:
      - mongodb-movie
      - kafka-server:kafka-server
    depends_on:
      - mongodb-movie
      - redis-cluster
      - kafka-server
    networks:
      - backend
      - redisnet
      - messaging_network
    healthcheck:
      test: "exit 0"
  booking-system:
    mem_limit: 256m
    mem_reservation: 60M
    cpus: 1
    build:
      context: ./booking-system/
      dockerfile: Dockerfile
    container_name: "booking-system"
    restart: always # This will be ignored if we deploy in docker swarm
    hostname: booking-system
    environment:
      - PROFILE=seed
      - MONGO_DB_HOSTNAME=mongodb-movie
      - MONGO_DB_USERNAME=intuit
      - MONGO_DB_PASSWORD=intuit123
      - MONGO_DB_NAME=movie
      - REDIS_HOST=10.0.0.11:7001,10.0.0.12:7002,10.0.0.13:7003,10.0.0.14:7004,10.0.0.15:7005,10.0.0.16:7006
      - KAFKA_HOST=kafka-server:9092
    ports:
      - 8085:8085
    working_dir: /opt/app
    links:
      - mongodb-movie
      - kafka-server:kafka-server
    depends_on:
      - mongodb-movie
      - redis-cluster
      - kafka-server
    networks:
      - backend
      - redisnet
      - messaging_network
    healthcheck:
      test: "exit 0"


volumes:
  mongodb_data_container: